# EKS Monitoring Agent Environment Configuration
# Copy this file to .env and fill in your actual values

# ============================================================================
# REQUIRED: Claude API Configuration
# ============================================================================
# Get your API key from: https://console.anthropic.com/
ANTHROPIC_API_KEY=sk-ant-your-api-key-here

# ============================================================================
# REQUIRED: GitHub Personal Access Token
# ============================================================================
# Create token at: https://github.com/settings/personal-access-tokens/new
# Required scopes: repo, read:org
# Note: GitHub MCP server expects GITHUB_PERSONAL_ACCESS_TOKEN (not GITHUB_TOKEN)
GITHUB_PERSONAL_ACCESS_TOKEN=ghp_your_token_here

# ============================================================================
# Agent Model Configuration
# ============================================================================
# Use Haiku for cost-effective routine tasks, Sonnet for complex/safety-critical

# Main orchestrator - coordinates all subagents (needs context management)
ORCHESTRATOR_MODEL=claude-sonnet-4-20250514

# Diagnostic subagent - fast routine health checks
DIAGNOSTIC_MODEL=claude-haiku-4-20250514

# Remediation subagent - safety-critical operations (requires careful reasoning)
REMEDIATION_MODEL=claude-sonnet-4-20250514

# Log analyzer subagent - complex pattern recognition
LOG_ANALYZER_MODEL=claude-sonnet-4-20250514

# Cost optimizer subagent - arithmetic calculations (Haiku = cost-effective for cost analysis!)
COST_OPTIMIZER_MODEL=claude-haiku-4-20250514

# GitHub subagent - professional communication, PR writing
GITHUB_AGENT_MODEL=claude-sonnet-4-20250514

# Jira subagent - ticket management and smart commenting
JIRA_AGENT_MODEL=claude-sonnet-4-5-20250929

# ============================================================================
# Monitoring Configuration
# ============================================================================
# Cluster name (explicit override - recommended)
# This ensures GitHub issues and Jira tickets show correct cluster name
# Auto-detection priority:
#   1. CLUSTER_NAME environment variable (if set)
#   2. Current kubectl context name (kubectl config current-context)
#   3. Fallback to 'unknown-cluster'
# Examples: dev-eks, staging-eks, prod-eks
CLUSTER_NAME=dev-eks

# How often to check cluster health (in seconds)
# Default: 300 (5 minutes)
# Recommended: 900 (15 minutes) to reduce costs and Jira comment spam
CHECK_INTERVAL=300

# Log level for daemon output
# SILENT  - Only errors (minimal output)
# MINIMAL - Critical events only (cycle start/end, completions, errors)
# NORMAL  - Standard logging (recommended for production)
# VERBOSE - All details including DEBUG (useful for troubleshooting)
# Default: NORMAL
LOG_LEVEL=NORMAL

# Write logs to files or stdout only
# true  - Logs written to both stdout AND files (default)
# false - Logs written to stdout ONLY (recommended for Datadog/external collectors)
# When false:
#   - Main daemon logs go to stdout only
#   - Audit trail goes to stderr only (no /tmp/claude-k8s-agent-actions.log)
#   - Reports still saved to REPORT_DIR
# Default: true
LOG_TO_FILE=true

# ============================================================================
# Kubernetes MCP Server Configuration
# ============================================================================
# Kubectl context to use (optional - for local testing with multiple clusters)
# When set, the agent will use this specific context instead of the current context
# This is passed to the Kubernetes MCP server and ALL subagents will use it
# Examples: dev-eks, staging-eks, prod-eks
# Leave empty to auto-detect from current context (kubectl config current-context)
# KUBE_CONTEXT=dev-eks

# Custom kubeconfig path (optional)
# Defaults to: ~/.kube/config or KUBECONFIG env var
# KUBECONFIG=/path/to/your/kubeconfig

# Logging level (0-9, similar to kubectl -v flag)
# 0 = errors only, 2 = normal, 4 = debug, 9 = trace
K8S_MCP_LOG_LEVEL=2

# Read-only mode - prevents all write operations (for testing)
# Set to "true" to enable read-only mode
K8S_MCP_READ_ONLY=false

# Disable destructive operations - prevents delete/update but allows create
# Set to "true" to disable destructive operations
K8S_MCP_DISABLE_DESTRUCTIVE=false

# ============================================================================
# GitHub MCP Server Configuration
# ============================================================================
# Toolsets to enable (comma-separated)
# Available: context,repos,issues,pull_requests,actions,notifications,code_security,etc.
# Default: context,repos,issues,pull_requests (minimal set for incident tracking)
GITHUB_TOOLSETS=context,repos,issues,pull_requests

# Read-only mode - prevents modifications (for testing)
# Set to "true" to enable read-only mode
GITHUB_READ_ONLY=false

# ============================================================================
# Optional: Microsoft Teams Notifications
# ============================================================================
# Teams webhook URL for cluster operation notifications
# Get webhook from Teams → Channel → Connectors → Incoming Webhook
# TEAMS_WEBHOOK_URL=https://yourorg.webhook.office.com/webhookb2/YOUR-WEBHOOK-ID

# Enable/disable Teams notifications
TEAMS_NOTIFICATIONS_ENABLED=true

# ============================================================================
# Optional: GitHub Repository Configuration
# ============================================================================
# Default GitHub organization for issue tracking
GITHUB_DEFAULT_ORG=artemishealth

# Default repository for infrastructure incidents
GITHUB_INCIDENT_REPO=olympus

# Repository for Kubernetes configuration PRs
GITHUB_K8S_CONFIG_REPO=deployments

# ============================================================================
# Jira Integration (Atlassian MCP Server)
# ============================================================================
# Jira instance URL (Cloud or Server/Data Center)
# Example for Jira Cloud: https://yourcompany.atlassian.net
JIRA_URL=https://yourcompany.atlassian.net

# Jira authentication - Cloud (API Token)
# Email address used to log into Jira
JIRA_USERNAME=your-email@company.com

# API Token (create at: Jira → Account Settings → Security → API Tokens)
JIRA_API_TOKEN=your-jira-api-token-here

# Project filter (optional - limits ticket creation to specific projects)
# Examples: DEVOPS, INFRA, K8S
# Leave empty to allow any project
JIRA_PROJECTS_FILTER=DEVOPS

# Read-only mode (for testing - prevents ticket creation)
# Set to "true" to enable read-only mode
JIRA_READ_ONLY=false

# ============================================================================
# Advanced Configuration
# ============================================================================
# Enable debug mode for SDK
DEBUG=false

# Custom report directory (default: /tmp/eks-monitoring-reports)
# REPORT_DIR=/custom/path/to/reports

# Custom log file (default: /tmp/eks-monitoring-daemon.log)
# LOG_FILE=/custom/path/to/daemon.log
