{
  "name": "dev-eks-oncall-engineer-v2",
  "nodes": [
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('build_ai_prompt').first().json.currentQuery }}",
        "options": {
          "systemMessage": "={{ $('build_ai_prompt').first().json.systemMessage }}\n",
          "maxIterations": 10
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.1,
      "position": [
        1312,
        -224
      ],
      "id": "c3f5c06c-9725-4f31-b04e-6e6a6bda72f3",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "claude-sonnet-4-20250514",
          "mode": "list",
          "cachedResultName": "Claude Sonnet 4"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatAnthropic",
      "typeVersion": 1.3,
      "position": [
        1184,
        16
      ],
      "id": "920e5fd3-d01e-4c80-bcf5-0681fdb089f6",
      "name": "Anthropic Chat Model",
      "credentials": {
        "anthropicApi": {
          "id": "VmrXd2Mchq63zCtQ",
          "name": "asela-api-key"
        }
      }
    },
    {
      "parameters": {
        "toolDescription": " Tool Name: oncall_agent_query\n  Description: Deep Kubernetes cluster analysis with pod status, logs, events, deployments, AND Datadog metrics for historical performance analysis.\n  Parameters:\n    - prompt (required): The Kubernetes question or analysis request (now supports Datadog historical metrics queries)",
        "method": "POST",
        "url": "https://oncall-agent.internal.artemishealth.com/query",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "prompt",
              "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters0_Value', ``, 'string') }}"
            }
          ]
        },
        "options": {
          "timeout": 120000
        }
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        1440,
        16
      ],
      "id": "e292a2cb-f2df-43bd-bfa0-32d99c56153f",
      "name": "oncall_agent_query",
      "credentials": {
        "httpHeaderAuth": {
          "id": "ly398q6n8XuUNI5e",
          "name": "Header Auth account"
        }
      }
    },
    {
      "parameters": {
        "toolDescription": "Check if a website or API endpoint is responding correctly. Returns HTTP status code, response time, and body preview to determine\n  availability and performance.",
        "url": "={{ $json.query }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        1568,
        16
      ],
      "id": "45725b64-6c48-4d19-a9b4-a5b0a7f80d16",
      "name": "website_health_query"
    },
    {
      "parameters": {
        "jsCode": "// Updated query_parser with /oncall command prefix - SILENT SKIP (no error shown)\nconst input = $input.first().json;\n\n// CRITICAL: Skip bot's own messages to prevent infinite loops\n// Check for Adaptive Card attachments (bot's signature)\nconst hasAdaptiveCard = input.attachments && input.attachments.length > 0 &&\n                        input.attachments.some(att => att.contentType === 'application/vnd.microsoft.card.adaptive');\nconst hasAttachmentPlaceholder = input.body?.content?.includes('<attachment id=');\n\nif (hasAdaptiveCard || hasAttachmentPlaceholder) {\n  // This is the bot's own Adaptive Card reply - skip silently\n  return {\n    json: {\n      shouldProcess: false,\n      skipReason: \"bot_message\",\n      query: null,\n      source: \"teams\",\n      user: \"Bot\",\n      namespace: \"default\",\n      timestamp: new Date().toISOString(),\n      threadId: null,\n      isReply: false,\n      messageId: input.id || null,\n      replyToId: input.replyToId || null\n    }\n  };\n}\n\nfunction extractTeamsMessage(data) {\n  if (data.body && data.body.content) {\n    const content = data.body.content;\n    const plainText = content.replace(/<[^>]*>/g, '').trim();\n    return plainText;\n  }\n  return null;\n}\n\nconst isTeamsMessage = input.messageType === \"message\" && input.from !== undefined;\nconst hasIncomingQuery = (input.query !== undefined && input.query !== null && input.query.trim() !== \"\") ||\n                         (input.prompt !== undefined && input.prompt !== null && input.prompt.trim() !== \"\");\n\nlet query, source, user, namespace, threadId, isReply;\n\nif (isTeamsMessage) {\n  query = extractTeamsMessage(input);\n  if (!query || query === \"\") {\n    // No text content - skip silently\n    return {\n      json: {\n        shouldProcess: false,\n        skipReason: \"no_text_content\",\n        query: null,\n        source: \"teams\",\n        user: input.from?.user?.displayName || \"Unknown\",\n        namespace: \"default\",\n        timestamp: new Date().toISOString(),\n        threadId: null,\n        isReply: false,\n        messageId: input.id || null,\n        replyToId: input.replyToId || null\n      }\n    };\n  }\n\n  // Check if this is a reply to an existing message\n  isReply = input.replyToId !== undefined && input.replyToId !== null;\n\n  // NEW: Check for /oncall command prefix (case-insensitive)\n  // Only check if this is NOT a reply (thread replies don't need prefix)\n  if (!isReply) {\n    const lowerQuery = query.toLowerCase();\n    if (!lowerQuery.startsWith('/oncall')) {\n      // Message doesn't start with /oncall and it's not a thread reply - skip silently\n      return {\n        json: {\n          shouldProcess: false,\n          skipReason: \"missing_oncall_prefix\",\n          query: query,\n          source: \"teams\",\n          user: input.from?.user?.displayName || input.from?.user?.email || \"Teams User\",\n          namespace: \"default\",\n          timestamp: new Date().toISOString(),\n          threadId: null,\n          isReply: false,\n          messageId: input.id || null,\n          replyToId: input.replyToId || null\n        }\n      };\n    }\n\n    // Strip the /oncall prefix and any extra whitespace\n    query = query.replace(/^\\/oncall\\s*/i, '').trim();\n\n    // Verify there's still a query after removing the prefix\n    if (!query || query === \"\") {\n      return {\n        json: {\n          shouldProcess: false,\n          skipReason: \"empty_query_after_prefix\",\n          query: null,\n          source: \"teams\",\n          user: input.from?.user?.displayName || input.from?.user?.email || \"Teams User\",\n          namespace: \"default\",\n          timestamp: new Date().toISOString(),\n          threadId: null,\n          isReply: false,\n          messageId: input.id || null,\n          replyToId: input.replyToId || null\n        }\n      };\n    }\n  }\n\n  source = \"teams\";\n  user = input.from?.user?.displayName || input.from?.user?.email || \"Teams User\";\n  namespace = \"default\";\n\n  // Extract thread ID for memory tracking\n  // Use replyToId as the conversation thread, or message id if it's a new thread\n  threadId = isReply ? input.replyToId : input.id;\n\n} else if (hasIncomingQuery) {\n  // Direct API calls bypass the /oncall requirement\n  query = input.query || input.prompt;\n  source = input.context?.source || \"on-demand\";\n  user = input.context?.user || \"Unknown\";\n  namespace = input.namespace || \"default\";\n  isReply = false;\n  threadId = Date.now().toString();\n} else {\n  // Scheduled/cron jobs bypass the /oncall requirement\n  query = \"Can you check the artemis-auth service in the artemis-auth-preprod namespace\";\n  source = \"scheduled\";\n  user = \"System (Cron)\";\n  namespace = \"default\";\n  isReply = false;\n  threadId = Date.now().toString();\n}\n\n// Message should be processed\nreturn {\n  json: {\n    shouldProcess: true,\n    skipReason: null,\n    query: query,\n    source: source,\n    user: user,\n    namespace: namespace,\n    timestamp: new Date().toISOString(),\n    threadId: threadId,\n    isReply: isReply,\n    messageId: input.id || null,\n    replyToId: input.replyToId || null\n  }\n};\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -320,
        -224
      ],
      "id": "15e1bcac-f017-4cd6-af71-26589d11bbc3",
      "name": "query_parser"
    },
    {
      "parameters": {
        "teamId": {
          "__rl": true,
          "value": "7ae997d9-9ecf-458d-b709-e0c44cd0ed15",
          "mode": "list",
          "cachedResultName": "Artemis-DevOps"
        },
        "channelId": {
          "__rl": true,
          "value": "19:a32bba9f7d8e4d71bc25cc10ad8119e3@thread.tacv2",
          "mode": "list",
          "cachedResultName": "oncall-engineer",
          "cachedResultUrl": "https://teams.cloud.microsoft/l/channel/19%3Aa32bba9f7d8e4d71bc25cc10ad8119e3%40thread.tacv2/oncall-engineer?groupId=7ae997d9-9ecf-458d-b709-e0c44cd0ed15&tenantId=26405e3d-7860-4104-af91-84d019caf705&allowXTenantAccess=True&ngc=True"
        }
      },
      "type": "n8n-nodes-base.microsoftTeamsTrigger",
      "typeVersion": 1,
      "position": [
        -992,
        -224
      ],
      "id": "c9573a8c-bb82-4feb-a4db-1b8f319160bd",
      "name": "Microsoft Teams Trigger",
      "webhookId": "8f859195-cdb7-47bf-b22d-0f992577d3a1",
      "credentials": {
        "microsoftTeamsOAuth2Api": {
          "id": "PrBw0tJ7VgLNfVWe",
          "name": "Microsoft Teams account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "  // Get data from previous nodes\n  const aiOutput = $('AI Agent').first().json.output || \"No output received\";\n  const queryData = $('query_parser').first().json;\n\n  // Build the Adaptive Card content (as an object first)\n  const adaptiveCardContent = {\n    \"type\": \"AdaptiveCard\",\n    \"$schema\": \"http://adaptivecards.io/schemas/adaptive-card.json\",\n    \"version\": \"1.4\",\n    \"body\": [\n      {\n        \"type\": \"TextBlock\",\n        \"text\": \"🤖 On-Call Assistant\",\n        \"weight\": \"Bolder\",\n        \"size\": \"Large\",\n        \"color\": \"Accent\"\n      },\n      {\n        \"type\": \"TextBlock\",\n        \"text\": aiOutput,\n        \"wrap\": true\n      },\n      {\n        \"type\": \"FactSet\",\n        \"facts\": [\n          {\n            \"title\": \"Query:\",\n            \"value\": queryData.query\n          },\n          {\n            \"title\": \"User:\",\n            \"value\": queryData.user\n          },\n          {\n            \"title\": \"Timestamp:\",\n            \"value\": queryData.timestamp\n          }\n        ]\n      }\n    ]\n  };\n\n  // Build the final payload - NO \"body\" wrapper here!\n  const payload = {\n    \"body\": {\n      \"contentType\": \"html\",\n      \"content\": \"<attachment id=\\\"1\\\"></attachment>\"\n    },\n    \"attachments\": [\n      {\n        \"id\": \"1\",\n        \"contentType\": \"application/vnd.microsoft.card.adaptive\",\n        \"content\": JSON.stringify(adaptiveCardContent)  // ← STRINGIFIED!\n      }\n    ]\n  };\n\n  return {\n    json: payload\n  };"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1696,
        -224
      ],
      "id": "6ef5c879-a976-4701-a04a-0f5dafe79f9a",
      "name": "convert_response_teams"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $('build_reply_url').first().json.url }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "oAuth2Api",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $('build_reply_url').first().json.payload }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2144,
        -224
      ],
      "id": "8c9a9122-cd95-444e-a91d-8348095bb11f",
      "name": "reply_teams_thread",
      "credentials": {
        "microsoftGraphSecurityOAuth2Api": {
          "id": "B1kle2Piy5DnW7PO",
          "name": "ms-graph-oauth-credentials"
        },
        "oAuth2Api": {
          "id": "DzPTRi3DuDiZltuR",
          "name": "graph-oauth2-api-credentials"
        }
      }
    },
    {
      "parameters": {
        "url": "=https://graph.microsoft.com/v1.0/{{ $json[\"@odata.id\"] }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "oAuth2Api",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -768,
        -224
      ],
      "id": "b620284d-430e-49e2-a1c9-1808af3d1f8a",
      "name": "get_teams_message",
      "credentials": {
        "microsoftGraphSecurityOAuth2Api": {
          "id": "B1kle2Piy5DnW7PO",
          "name": "ms-graph-oauth-credentials"
        },
        "oAuth2Api": {
          "id": "DzPTRi3DuDiZltuR",
          "name": "graph-oauth2-api-credentials"
        }
      }
    },
    {
      "parameters": {
        "url": "=https://graph.microsoft.com/v1.0/teams/{{ $('Microsoft Teams Trigger').first().json[\"@odata.id\"].split(\"teams('\")[1].split(\"')\")[0] }}/channels/{{ $('Microsoft Teams Trigger').first().json[\"@odata.id\"].split(\"channels('\")[1].split(\"')\")[0] }}/messages/{{ $('query_parser').first().json.threadId }}/replies",
        "authentication": "genericCredentialType",
        "genericAuthType": "oAuth2Api",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        352,
        -336
      ],
      "id": "1cffb2ce-e202-4a87-a55a-2ce1f9eb5931",
      "name": "get_thread_history",
      "executeOnce": false,
      "credentials": {
        "microsoftGraphSecurityOAuth2Api": {
          "id": "B1kle2Piy5DnW7PO",
          "name": "ms-graph-oauth-credentials"
        },
        "oAuth2Api": {
          "id": "DzPTRi3DuDiZltuR",
          "name": "graph-oauth2-api-credentials"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "d7a1988e-7013-48b5-9092-667f13abae87",
              "leftValue": "={{ $('query_parser').first().json.isReply }}",
              "rightValue": "true",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        128,
        -224
      ],
      "id": "66c4d8a1-a993-4f31-96ca-17c516e72299",
      "name": "check_if_reply"
    },
    {
      "parameters": {
        "jsCode": "// FINAL FIX: format_conversation_history - Correctly detects bot messages by Adaptive Card presence\nconst queryData = $('query_parser').first().json;\n\n// Get thread history from Graph API (if this is a reply)\nlet messages = [];\ntry {\n  const historyResponse = $('get_thread_history').first().json;\n  if (historyResponse && historyResponse.value) {\n    messages = historyResponse.value;\n  }\n} catch (error) {\n  // No thread history (new thread), return empty array\n  return {\n    json: {\n      conversationHistory: [],\n      currentQuery: queryData.query,\n      threadId: queryData.threadId,\n      messageCount: 0\n    }\n  };\n}\n\n// Helper: Extract text from user's HTML message\nfunction extractTeamsMessage(data) {\n  if (data.body && data.body.content) {\n    const content = data.body.content;\n    const plainText = content.replace(/<[^>]*>/g, '').trim();\n    return plainText;\n  }\n  return null;\n}\n\n// Helper: Extract text from bot's Adaptive Card\nfunction extractAdaptiveCardText(data) {\n  // Check if this is an Adaptive Card attachment\n  if (data.attachments && data.attachments.length > 0) {\n    const attachment = data.attachments[0];\n\n    if (attachment.contentType === 'application/vnd.microsoft.card.adaptive') {\n      try {\n        // Parse the Adaptive Card content\n        const cardContent = typeof attachment.content === 'string'\n          ? JSON.parse(attachment.content)\n          : attachment.content;\n\n        // Extract text from TextBlock elements in the card body\n        if (cardContent.body && Array.isArray(cardContent.body)) {\n          const textBlocks = cardContent.body\n            .filter(block => block.type === 'TextBlock')\n            .map(block => block.text)\n            .join('\\n');\n\n          return textBlocks || '[Adaptive Card - no text extracted]';\n        }\n      } catch (e) {\n        return '[Adaptive Card - parsing failed]';\n      }\n    }\n  }\n\n  return '[Bot message - no extractable text]';\n}\n\n// Helper: Check if message is a bot message\nfunction isBotMessage(msg) {\n  // Bot messages have Adaptive Card attachments\n  if (msg.attachments && msg.attachments.length > 0) {\n    const hasAdaptiveCard = msg.attachments.some(\n      att => att.contentType === 'application/vnd.microsoft.card.adaptive'\n    );\n    if (hasAdaptiveCard) return true;\n  }\n\n  // Also check for attachment placeholder in body\n  if (msg.body && msg.body.content &&\n      msg.body.content.includes('<attachment id=')) {\n    return true;\n  }\n\n  return false;\n}\n\n// Build conversation history array\nconst conversation = [];\n\nfor (const msg of messages) {\n  // Skip the current message (it will be the \"currentQuery\")\n  if (msg.id === queryData.messageId) {\n    continue;\n  }\n\n  if (isBotMessage(msg)) {\n    // Bot message (assistant response)\n    const botText = extractAdaptiveCardText(msg);\n    if (botText && botText !== \"\" && !botText.startsWith('[Bot message -')) {\n      conversation.push({\n        role: \"assistant\",\n        content: botText\n      });\n    }\n  } else {\n    // User message\n    const userText = extractTeamsMessage(msg);\n    if (userText && userText !== \"\") {\n      conversation.push({\n        role: \"user\",\n        content: userText\n      });\n    }\n  }\n}\n\nreturn {\n  json: {\n    conversationHistory: conversation,\n    currentQuery: queryData.query,\n    threadId: queryData.threadId,\n    messageCount: conversation.length\n  }\n};\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        576,
        -336
      ],
      "id": "cf05e826-4847-40f8-9e2f-bcd9e7e5976e",
      "name": "format_conversation_history"
    },
    {
      "parameters": {
        "jsCode": "// Fixed build_ai_prompt to handle LangChain message format from Window Buffer Memory\nconst queryData = $('query_parser').first().json;\nconst currentQuery = queryData.query;\n\n// Try to get conversation history (will be empty for new threads)\nlet conversationHistory = [];\ntry {\n  const historyNode = $('format_conversation_history').first();\n  if (historyNode && historyNode.json && historyNode.json.conversationHistory) {\n    conversationHistory = historyNode.json.conversationHistory;\n  }\n} catch (error) {\n  // No history available (new thread), that's fine\n  conversationHistory = [];\n}\n\n// Build conversation context section\nlet conversationContext = \"\";\nif (conversationHistory && conversationHistory.length > 0) {\n  conversationContext = \"\\n## CONVERSATION CONTEXT\\n\\n[Previous conversation]\\nPrevious conversation:\\n\";\n\n  for (const msg of conversationHistory) {\n    // Handle LangChain message format (n8n Window Buffer Memory returns these)\n    // LangChain messages have structure: { lc: 1, type: \"constructor\", id: [...], kwargs: { content: \"...\" } }\n    const isHuman = msg.lc === 1 && msg.id && msg.id.includes && msg.id.includes('HumanMessage');\n    const isAI = msg.lc === 1 && msg.id && msg.id.includes && msg.id.includes('AIMessage');\n\n    if (isHuman && msg.kwargs && msg.kwargs.content) {\n      conversationContext += `User: ${msg.kwargs.content}\\n`;\n    } else if (isAI && msg.kwargs && msg.kwargs.content) {\n      conversationContext += `Assistant: ${msg.kwargs.content}\\n`;\n    }\n    // Also support simple format with .role property (in case format changes)\n    else if (msg.role === \"user\") {\n      conversationContext += `User: ${msg.content}\\n`;\n    } else if (msg.role === \"assistant\") {\n      conversationContext += `Assistant: ${msg.content}\\n`;\n    }\n  }\n\n  conversationContext += \"\\nCurrent question: \" + currentQuery + \"\\n\";\n} else {\n  // No previous conversation\n  conversationContext = \"\\n## CONVERSATION CONTEXT\\n\\nThis is a new conversation.\\n\\nCurrent question: \" + currentQuery + \"\\n\";\n}\n\n// Base system message (your full original message)\nconst baseSystemMessage = `You are an intelligent On-Call Engineering Assistant with access to real-time Kubernetes cluster information and website health monitoring.\n\n${conversationContext}\n\n## YOUR CAPABILITIES\n\n**Your Expert Tools**:\n1. **website_health_query** - Check if websites/APIs are responding correctly\n2. **oncall_agent_query** - Deep K8s cluster analysis and troubleshooting\n\n## Tool 1: website_health_query\n\n**Purpose**: Check if a website or API endpoint is up and returning expected responses.\n\n**When to Use**:\n- User asks about website availability (e.g., \"Is devops.artemishealth.com up?\")\n- Health check requests for public endpoints\n- API endpoint verification\n- Response time checks\n\n**Input Parameter**:\n- url (string, required): The website URL to check (e.g., \"https://devops.artemishealth.com\")\n\n**Returns**: HTTP status code, response time, body preview, and availability status\n\n## Tool 2: oncall_agent_query (ENHANCED WITH DATADOG)\n\n**Purpose**: Deep Kubernetes cluster analysis with pod status, logs, events, deployments, AND Datadog historical metrics.\n\n**NEW DATADOG CAPABILITIES**:\nThe oncall agent can now query Datadog metrics for:\n- CPU and memory usage trends over time\n- Network traffic patterns and spikes\n- Resource exhaustion detection (memory leaks)\n- Historical correlation with incidents\n\n**When to Use**:\n- User asks about K8s services, pods, or deployments\n- After website_health_query detects issues (for root cause analysis)\n- Direct troubleshooting requests\n- Namespace or pod queries\n- Performance trends or \"over time\" questions\n- Memory leak investigations\n- Historical resource analysis\n\n**Input Parameter**:\n- prompt (string, required): The Kubernetes question or analysis request (now supports Datadog metrics queries)\n\n**Returns**: Detailed markdown analysis with pod status, events, recommendations, AND Datadog metrics when relevant\n\n**When to Include Datadog Queries**:\n- User asks about performance \"over time\" or \"trends\"\n- Investigating gradual degradation (memory leaks)\n- Checking resource usage before/after deployments\n- Correlating current incidents with historical patterns\n- Network traffic analysis or NAT correlation\n\n## Service to Website Mappings\n\nUse these mappings to correlate website issues with K8s services:\n\n**devops.artemishealth.com**:\n- Services: proteus, artemis-auth\n- Namespaces: proteus-dev, artemis-auth-dev\n- Critical path: artemis-auth for SSO → proteus for main app\n\n**api.artemishealth.com**:\n- Services: proteus, hermes\n- Namespaces: proteus-dev, hermes-dev\n- Critical path: Load balancer → proteus API\n\n**auth.artemishealth.com**:\n- Services: artemis-auth\n- Namespaces: artemis-auth-dev\n- Critical path: artemis-auth only\n\n## Intelligent Troubleshooting Workflow\n\n### Scenario 1: Website Health Check\n\nUser: \"Check if devops.artemishealth.com is up\"\n\n**Your Actions**:\n1. Call **website_health_query** with url: \"https://devops.artemishealth.com\"\n2. If status is 200 and response time < 3000ms:\n   - Report: \"✅ Site is healthy, responding in Xms\"\n3. If status is 5xx, timeout, or error:\n   - Report the issue\n   - Automatically call **oncall_agent_query** with: \"Check the health of proteus and artemis-auth services in proteus-dev and artemis-auth-dev namespaces\"\n   - Correlate: \"Site down, investigating backend services...\"\n4. Present combined analysis with website status + K8s findings\n\n### Scenario 2: Website is Slow\n\nUser: \"Why is devops.artemishealth.com slow?\"\n\n**Your Actions**:\n1. Call **website_health_query** to confirm slowness and measure response time\n2. Call **oncall_agent_query** with: \"Analyze proteus and artemis-auth services in dev namespaces, check for high CPU, memory pressure, or pod restarts\"\n3. Correlate findings: \"Response time is Xms (slow). Backend shows: [K8s findings]\"\n4. Provide remediation steps\n\n### Scenario 3: Direct K8s Query\n\nUser: \"Check proteus service\"\n\n**Your Actions**:\n1. Call **oncall_agent_query** directly (no need for website check)\n2. Present K8s analysis\n\n### Scenario 4: Combined Health Check\n\nUser: \"Do a full health check on our services\"\n\n**Your Actions**:\n1. Call **website_health_query** for each critical website:\n   - devops.artemishealth.com\n   - api.artemishealth.com\n   - auth.artemishealth.com\n2. Call **oncall_agent_query** with: \"Review all critical services: proteus, artemis-auth, hermes, zeus, plutus\"\n3. Present combined report: Website availability + K8s service health\n\n## Response Guidelines\n\n### For Healthy Website + Healthy K8s:\n\\`\\`\\`\n✅ **devops.artemishealth.com**: Healthy\n   - HTTP 200, response time: 245ms\n   - Backend services (proteus, artemis-auth): All pods running, 0 restarts\n\\`\\`\\`\n\n### For Down Website:\n\\`\\`\\`\n🔴 **devops.artemishealth.com**: DOWN\n   - HTTP 502 Bad Gateway\n   - Investigating backend services...\n\n**Root Cause Found**:\n   - proteus-dev: 0/5 pods ready (CrashLoopBackOff)\n   - Issue: [specific K8s diagnosis]\n\n**Remediation**:\n   [Specific steps from oncall_agent_query]\n\\`\\`\\`\n\n### For Slow Website:\n\\`\\`\\`\n⚠️ **devops.artemishealth.com**: SLOW\n   - HTTP 200, response time: 8500ms (expected <2000ms)\n   - Investigating backend performance...\n\n**Findings**:\n   - artemis-auth-dev: High CPU usage, 2 pods restarting\n   - proteus-dev: Healthy\n\n**Recommendation**:\n   [Remediation steps]\n\\`\\`\\`\n\n## Service Mapping Reference\n\nWhen troubleshooting websites, check these K8s services:\n\n| Website | Primary Service | Supporting Services | Namespaces |\n|---------|----------------|-------------------|------------|\n| devops.artemishealth.com | proteus | artemis-auth | proteus-dev, artemis-auth-dev |\n| api.artemishealth.com | proteus | hermes | proteus-dev, hermes-dev |\n| auth.artemishealth.com | artemis-auth | - | artemis-auth-dev |\n| app.artemishealth.com | proteus | artemis-auth, zeus | proteus-dev, artemis-auth-dev, zeus-dev |\n\n## Critical Services in dev-eks\n\n- **proteus** (proteus-dev) - Core application backend\n- **artemis-auth** (artemis-auth-dev) - Authentication/SSO\n- **hermes** (hermes-dev) - Messaging/notifications\n- **zeus** (zeus-dev) - Core service\n- **plutus** (plutus-dev) - Financial processing\n\n## Tool Usage Best Practices\n\n### Use website_health_query for:\n- Quick availability checks\n- Response time measurement\n- HTTP status verification\n- External endpoint validation\n\n### Use oncall_agent_query for:\n- Pod and deployment health\n- Resource utilization\n- Recent deployments\n- Event correlation\n- Detailed troubleshooting\n\n### Use BOTH tools when:\n- Website is down (check site → investigate K8s)\n- Website is slow (measure response → check backend)\n- Full health audit requested\n- Proactive monitoring\n\n## Severity Classification\n\nClassify issues based on combined data:\n\n**🔴 CRITICAL** (Immediate Response Required):\n- Website returning 5xx errors\n- 0 pods ready in critical service\n- OOMKilled or CrashLoopBackOff\n- Complete service outage\n\n**⚠️ WARNING** (Rapid Response):\n- Website slow (>5s response time)\n- High pod restart counts (>3)\n- Degraded replica count (not all pods ready)\n- Policy violations with functionality impact\n\n**✅ HEALTHY** (All Systems Operational):\n- Website responding in <2s with 200 status\n- All pods running and ready\n- 0 restarts\n- No critical events\n\n## Example Interactions\n\n**Example 1: Simple Website Check**\nUser: \"Is devops.artemishealth.com up?\"\nYou:\n1. Call website_health_query with url: \"https://devops.artemishealth.com\"\n2. If healthy: \"✅ devops.artemishealth.com is up, responding in 245ms with HTTP 200\"\n3. If down: Proceed to K8s troubleshooting...\n\n**Example 2: Website Down - Full Investigation**\nUser: \"devops.artemishealth.com is not loading\"\nYou:\n1. Call website_health_query: url: \"https://devops.artemishealth.com\"\n2. Detect: HTTP 502 Bad Gateway\n3. Call oncall_agent_query: \"Check the health of proteus and artemis-auth services in proteus-dev and artemis-auth-dev namespaces\"\n4. Present combined analysis: \"🔴 Site is down due to [K8s issue]. Remediation: [steps]\"\n\n**Example 3: Proactive Health Check**\nUser: \"Do a health check on our production websites\"\nYou:\n1. Call website_health_query for each:\n   - https://devops.artemishealth.com\n   - https://api.artemishealth.com\n   - https://auth.artemishealth.com\n2. If any issues found, call oncall_agent_query for affected services\n3. Present summary report with all findings\n\n**Example 4: Service-Specific Query**\nUser: \"Check proteus service\"\nYou:\n1. Call oncall_agent_query: \"Analyze proteus service health in proteus-dev namespace\"\n2. Present K8s analysis (no website check needed)\n\n**Example 5: Slow Performance Investigation**\nUser: \"Why is the app slow?\"\nYou:\n1. Call website_health_query: \"https://devops.artemishealth.com\"\n2. Measure response time\n3. Call oncall_agent_query: \"Analyze proteus and artemis-auth services, check for high CPU/memory, slow queries, or resource constraints\"\n4. Correlate: \"Response time is 8.5s. Backend analysis shows: [findings]. Recommendation: [steps]\"\n\n**Example 6: Historical Performance Analysis (NEW - DATADOG)**\nUser: \"What was the CPU usage for proteus-dev over the last 24 hours?\"\nYou:\n1. Call oncall_agent_query: \"Query Datadog for proteus-dev CPU usage trends over the last 24 hours\"\n2. Present trend analysis with key observations (peaks, averages, anomalies)\n3. Correlate with any pod restarts or deployments if relevant\n\n**Example 7: Memory Leak Investigation (NEW - DATADOG)**\nUser: \"Is artemis-auth leaking memory?\"\nYou:\n1. Call oncall_agent_query: \"Check artemis-auth memory trends over the last 7 days in artemis-auth-dev namespace using Datadog\"\n2. Analyze if memory is gradually increasing\n3. Check current pod status and restart patterns\n4. Provide remediation if leak detected\n\n**Example 8: Network Traffic Analysis (NEW - DATADOG)**\nUser: \"What caused the NAT spike at 2am yesterday?\"\nYou:\n1. Call oncall_agent_query: \"Correlate NAT spike at 2am with Zeus jobs and check Datadog network traffic patterns during that window\"\n2. Present combined analysis of CloudWatch NAT metrics + Datadog pod network metrics + Zeus job correlation\n3. Identify root cause pod/service and provide specific remediation\n\n## Safety Rules\n\n- Both tools are **READ-ONLY** (no deployments, restarts, or changes)\n- Always validate information before suggesting actions\n- For critical production issues, recommend human verification\n- Never make assumptions - use tools to get real data\n- Escalate if unable to diagnose with available tools\n\n## Remember\n\nThe **website_health_query** gives you the WHAT (site is down/slow), and the **oncall_agent_query** gives you the WHY (K8s pods crashing, high CPU, etc.).\n\nUse them together for complete root cause analysis: External symptom → Internal diagnosis → Actionable fix.\n\nWhen in doubt, call both tools and correlate the findings to give engineers a complete picture!`;\n\nreturn {\n  json: {\n    systemMessage: baseSystemMessage,\n    currentQuery: currentQuery,\n    hasHistory: conversationHistory.length > 0,\n    historyLength: conversationHistory.length\n  }\n};\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1024,
        -224
      ],
      "id": "81d15651-9ad1-4014-84d6-29af770ba66d",
      "name": "build_ai_prompt"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('query_parser').first().json.threadId }}",
        "contextWindowLength": 10
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        1312,
        16
      ],
      "id": "01fada2b-934b-4504-b279-75c7abdc1026",
      "name": "chat_memory"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        800,
        -224
      ],
      "id": "50e41581-afbb-4322-b22f-092bb9ca3d09",
      "name": "Merge"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "0c32d32b-ac6e-4fa3-86c1-bb9bc27b209d",
              "leftValue": "={{ $json.body.content }}",
              "rightValue": "<attachment id=\"1\"></attachment>",
              "operator": {
                "type": "string",
                "operation": "notContains"
              }
            },
            {
              "id": "3f874798-ea7d-4d5d-8d86-006f115ca7d3",
              "leftValue": "={{ $json.attachments.length }}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -544,
        -224
      ],
      "id": "b735f7fc-30b1-4116-be16-74e0b11eed97",
      "name": "filter_bot_messages"
    },
    {
      "parameters": {
        "jsCode": "// Build the reply URL from Teams trigger data\n  const triggerData = $('Microsoft Teams Trigger').first().json;\n  const queryData = $('query_parser').first().json;\n  const payload = $input.first().json; // The Adaptive Card payload\n\n  // Extract team and channel IDs from @odata.id\n  const odataId = triggerData[\"@odata.id\"];\n\n  // Parse team ID\n  const teamIdMatch = odataId.match(/teams\\('([^']+)'\\)/);\n  const teamId = teamIdMatch ? teamIdMatch[1] : null;\n\n  // Parse channel ID\n  const channelIdMatch = odataId.match(/channels\\('([^']+)'\\)/);\n  const channelId = channelIdMatch ? channelIdMatch[1] : null;\n\n  // Use threadId from query_parser (handles both new threads and replies correctly)\n  const threadId = queryData.threadId;\n\n  if (!teamId || !channelId || !threadId) {\n    throw new Error(`Missing required IDs - Team: ${teamId}, Channel: ${channelId}, Thread: ${threadId}`);\n  }\n\n  // Build the complete URL\n  const replyUrl = `https://graph.microsoft.com/v1.0/teams/${teamId}/channels/${channelId}/messages/${threadId}/replies`;\n\n  return {\n    json: {\n      url: replyUrl,\n      payload: payload,\n      teamId: teamId,\n      channelId: channelId,\n      threadId: threadId\n    }\n  };"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1920,
        -224
      ],
      "id": "eaa65128-12c5-4dc2-96c9-141b4b583b2e",
      "name": "build_reply_url"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "81b0e805-679c-4799-87da-05411bc0fd13",
              "leftValue": "={{ $json.shouldProcess }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -96,
        -224
      ],
      "id": "f918452e-a63b-4053-a6b9-2185dce4c7dc",
      "name": "check_should_process"
    }
  ],
  "pinData": {},
  "connections": {
    "Anthropic Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "convert_response_teams",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "oncall_agent_query": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "website_health_query": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "query_parser": {
      "main": [
        [
          {
            "node": "check_should_process",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Microsoft Teams Trigger": {
      "main": [
        [
          {
            "node": "get_teams_message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "convert_response_teams": {
      "main": [
        [
          {
            "node": "build_reply_url",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get_teams_message": {
      "main": [
        [
          {
            "node": "filter_bot_messages",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get_thread_history": {
      "main": [
        [
          {
            "node": "format_conversation_history",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "check_if_reply": {
      "main": [
        [
          {
            "node": "get_thread_history",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "format_conversation_history": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "chat_memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "build_ai_prompt": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "build_ai_prompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "filter_bot_messages": {
      "main": [
        [
          {
            "node": "query_parser",
            "type": "main",
            "index": 0
          }
        ],
        []
      ]
    },
    "build_reply_url": {
      "main": [
        [
          {
            "node": "reply_teams_thread",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "check_should_process": {
      "main": [
        [
          {
            "node": "check_if_reply",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1",
    "callerPolicy": "workflowsFromSameOwner"
  },
  "versionId": "4b998193-d3c0-42c9-a304-7037a18db2c0",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "17db7209430e071f9d2071f50d91ebe180a0dc79e35aa354838ac06d9eb222cb"
  },
  "id": "lfMAty5yRDS1lIuA",
  "tags": [
    {
      "createdAt": "2025-09-12T13:32:59.555Z",
      "updatedAt": "2025-09-12T13:32:59.555Z",
      "id": "vRXmvBLU5jbpoc5d",
      "name": "devops"
    }
  ]
}